plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group 'org.zhou'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}


subprojects {
    /**
     * java是Gradle的核心插件，是内置的，内置插件不需要配置依赖路径
     */
    apply plugin: 'java'
    /**
     * 同上  让Gradle自动生成Intellij的项目文件
     */
    apply plugin: 'idea'
    /**
     * 注意gradle插件不再自动应用，所以这里需要指定
     */
    apply plugin: 'org.springframework.boot'
    /**
     * 依赖管理插件仍然是一个spring-boot-gradle-plugin传递依赖，
     * 所以无需在build.gradle配置中明确列出此依赖。
     *
     * 依赖管理，用来传递spring的依赖
     */
    apply plugin: 'io.spring.dependency-management'

    group 'org.zhou'
    version '1.0-SNAPSHOT'
    sourceCompatibility = '1.8'

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }

    /**
     * 在多模块下,授权打包依赖模块
     */
    jar {
        enabled = true
    }

    /**
     * 重打包基础配置
     */
    bootJar {
        launchScript()
        archiveBaseName = "${project.group}-${project.name}"
    }
}

/**
 * 关闭父项目的打包功能
 */
bootJar{
    enabled=false
}
/**
 * 关闭父项目的打包功能
 */
jar{
    enabled=false
}
